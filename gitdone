#!/bin/bash

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to print error and exit
error_exit() {
    print_color "$RED" "ERROR: $1"
    exit 1
}

# Check for Ollama API URL in environment variables
if [ -z "$OLLAMA_API_URL" ]; then
    error_exit "Please set the OLLAMA_API_URL environment variable."
fi

# Run the Python script
python3 - <<EOF
import os
import subprocess
import requests
import json

def run_command(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, error = process.communicate()
    if process.returncode != 0:
        print(f"\033[0;31mERROR: {error.decode('utf-8').strip()}\033[0m")
        exit(1)
    return output.decode('utf-8').strip()

def print_color(color, message):
    print(f"{color}{message}\033[0m")

def get_current_branch():
    return run_command("git rev-parse --abbrev-ref HEAD")

def main():
    # Check if we're in a git repository
    if run_command("git rev-parse --is-inside-work-tree") != "true":
        print_color("\033[0;31m", "ERROR: Not a git repository. Please run this script from within a git repository.")
        exit(1)

    # Add all changes
    print_color("\033[0;34m", "Adding all changes...")
    run_command("git add .")

    # Get git diff to summarize
    changes = run_command("git diff --cached")

    # Check if there are any changes staged
    if not changes:
        print_color("\033[0;33m", "No changes to commit.")
        exit(0)

    # Call Ollama API to summarize changes
    print_color("\033[0;34m", "Generating commit message...")
    ollama_api_url = os.getenv("OLLAMA_API_URL")
    payload = {
        "model": "llama2",
        "prompt": f"Generate a detailed and specific commit message for the following git diff. The message should clearly describe the changes made, starting with a verb in the imperative mood (e.g., 'Add', 'Fix', 'Update'). Include any relevant details that would help understand the context of the changes:\n\n{changes}",
        "stream": False
    }

    response = requests.post(f"{ollama_api_url}/api/generate", json=payload)
    response.raise_for_status()
    response_data = response.json()
    print_color("\033[0;34m", f"API Response: {response_data}")  # Debugging line
    summary = response_data.get('response', '').strip()

    if not summary:
        print_color("\033[0;31m", "ERROR: Failed to generate commit summary.")
        exit(1)

    # Show the commit message
    print_color("\033[0;33m", "Generated commit message:")
    print(summary)

    # Commit changes
    print_color("\033[0;34m", "Committing changes...")
    run_command(f'git commit -m "{summary}"')

    # Push changes
    current_branch = get_current_branch()
    print_color("\033[0;34m", f"Pushing to origin/{current_branch}...")
    run_command(f"git push origin {current_branch}")
    print_color("\033[0;32m", "Changes committed and pushed successfully!")

    print_color("\033[0;33m", "Commit message:")
    print(summary)

if __name__ == "__main__":
    main()
EOF

# Check if Python script executed successfully
if [ $? -ne 0 ]; then
    error_exit "Python script failed to execute properly."
fi